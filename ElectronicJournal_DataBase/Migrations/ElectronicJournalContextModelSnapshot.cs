// <auto-generated />
using System;
using ElectronicJournal_DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicJournal_DataBase.Migrations
{
    [DbContext(typeof(ElectronicJournalContext))]
    partial class ElectronicJournalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AcademicPerformance", b =>
                {
                    b.Property<int>("AcademicPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AcademicPerformanceId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicPerformances");
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessLevelId");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            AccessLevelId = 1,
                            AccessLevelName = "Студент"
                        },
                        new
                        {
                            AccessLevelId = 2,
                            AccessLevelName = "Староста"
                        },
                        new
                        {
                            AccessLevelId = 3,
                            AccessLevelName = "Преподаватель"
                        },
                        new
                        {
                            AccessLevelId = 4,
                            AccessLevelName = "Деканат"
                        },
                        new
                        {
                            AccessLevelId = 5,
                            AccessLevelName = "Админ"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BuildingId");

                    b.HasAlternateKey("BuildingName");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            BuildingName = "Оршанская"
                        },
                        new
                        {
                            BuildingId = 2,
                            BuildingName = "ИНЖЭКИН"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ClassroomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassroomId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            BuildingId = 1,
                            ClassroomName = "403B"
                        },
                        new
                        {
                            ClassroomId = 2,
                            BuildingId = 1,
                            ClassroomName = "404B"
                        },
                        new
                        {
                            ClassroomId = 3,
                            BuildingId = 1,
                            ClassroomName = "423B"
                        },
                        new
                        {
                            ClassroomId = 4,
                            BuildingId = 1,
                            ClassroomName = "608Б"
                        },
                        new
                        {
                            ClassroomId = 5,
                            BuildingId = 1,
                            ClassroomName = "606Б"
                        },
                        new
                        {
                            ClassroomId = 6,
                            BuildingId = 1,
                            ClassroomName = "722Б"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserId")
                        .HasColumnName("StarostaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearFormationGroup")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId");

                    b.HasAlternateKey("GroupName");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            GroupName = "М3О-335Б-17",
                            YearFormationGroup = new DateTime(2017, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GroupId = 2,
                            GroupName = "М3О-333Б-17",
                            YearFormationGroup = new DateTime(2017, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.GroupLesson", b =>
                {
                    b.Property<int>("GroupLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("GroupLessonId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");

                    b.HasData(
                        new
                        {
                            GroupLessonId = 1,
                            GroupId = 1,
                            LessonId = 1
                        },
                        new
                        {
                            GroupLessonId = 2,
                            GroupId = 2,
                            LessonId = 1
                        },
                        new
                        {
                            GroupLessonId = 3,
                            GroupId = 1,
                            LessonId = 2
                        },
                        new
                        {
                            GroupLessonId = 4,
                            GroupId = 2,
                            LessonId = 2
                        },
                        new
                        {
                            GroupLessonId = 5,
                            GroupId = 1,
                            LessonId = 3
                        },
                        new
                        {
                            GroupLessonId = 6,
                            GroupId = 1,
                            LessonId = 4
                        },
                        new
                        {
                            GroupLessonId = 7,
                            GroupId = 1,
                            LessonId = 5
                        },
                        new
                        {
                            GroupLessonId = 8,
                            GroupId = 1,
                            LessonId = 6
                        },
                        new
                        {
                            GroupLessonId = 9,
                            GroupId = 1,
                            LessonId = 7
                        },
                        new
                        {
                            GroupLessonId = 10,
                            GroupId = 1,
                            LessonId = 8
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeScheduleId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeScheduleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            Date = new DateTime(2020, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 4,
                            TimeScheduleId = 1
                        },
                        new
                        {
                            LessonId = 2,
                            Date = new DateTime(2020, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 4,
                            TimeScheduleId = 2
                        },
                        new
                        {
                            LessonId = 3,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 1,
                            TimeScheduleId = 3
                        },
                        new
                        {
                            LessonId = 4,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 3,
                            SubjectId = 1,
                            TimeScheduleId = 4
                        },
                        new
                        {
                            LessonId = 5,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 3,
                            SubjectId = 1,
                            TimeScheduleId = 5
                        },
                        new
                        {
                            LessonId = 6,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 2,
                            TimeScheduleId = 2
                        },
                        new
                        {
                            LessonId = 7,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 2,
                            SubjectId = 2,
                            TimeScheduleId = 3
                        },
                        new
                        {
                            LessonId = 8,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 2,
                            SubjectId = 2,
                            TimeScheduleId = 4
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LessonTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LessonTypeId");

                    b.HasAlternateKey("LessonTypeName");

                    b.ToTable("LessonTypes");

                    b.HasData(
                        new
                        {
                            LessonTypeId = 1,
                            LessonTypeName = "Лекция"
                        },
                        new
                        {
                            LessonTypeId = 2,
                            LessonTypeName = "Практическое занятие"
                        },
                        new
                        {
                            LessonTypeId = 3,
                            LessonTypeName = "Лабораторная работа"
                        },
                        new
                        {
                            LessonTypeId = 4,
                            LessonTypeName = "Экзамен"
                        },
                        new
                        {
                            LessonTypeId = 5,
                            LessonTypeName = "Зачет"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PositionId");

                    b.HasAlternateKey("PositionName");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "Лаборант"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "Преподаватель"
                        },
                        new
                        {
                            PositionId = 3,
                            PositionName = "Старший преподаватель"
                        },
                        new
                        {
                            PositionId = 4,
                            PositionName = "Доцент"
                        },
                        new
                        {
                            PositionId = 5,
                            PositionName = "Профессор"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.StudentGroup", b =>
                {
                    b.Property<int>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentGroupId");

                    b.HasAlternateKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            StudentGroupId = 1,
                            GroupId = 1,
                            UserId = 6
                        },
                        new
                        {
                            StudentGroupId = 2,
                            GroupId = 1,
                            UserId = 7
                        },
                        new
                        {
                            StudentGroupId = 3,
                            GroupId = 1,
                            UserId = 8
                        },
                        new
                        {
                            StudentGroupId = 4,
                            GroupId = 2,
                            UserId = 13
                        },
                        new
                        {
                            StudentGroupId = 5,
                            GroupId = 2,
                            UserId = 14
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubjectId");

                    b.HasAlternateKey("SubjectName");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            SubjectName = "Web-программирование"
                        },
                        new
                        {
                            SubjectId = 2,
                            SubjectName = "Программирование в информационных системах"
                        },
                        new
                        {
                            SubjectId = 3,
                            SubjectName = "Машинно-ориентированное программирование"
                        },
                        new
                        {
                            SubjectId = 4,
                            SubjectName = "Операционные системы"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasAlternateKey("UserId");

                    b.HasIndex("PositionId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            PositionId = 3,
                            UserId = 9
                        },
                        new
                        {
                            TeacherId = 2,
                            PositionId = 4,
                            UserId = 10
                        },
                        new
                        {
                            TeacherId = 3,
                            PositionId = 4,
                            UserId = 15
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TeacherLesson", b =>
                {
                    b.Property<int>("TeacherLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("TeacherLessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLessons");

                    b.HasData(
                        new
                        {
                            TeacherLessonId = 1,
                            LessonId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 2,
                            LessonId = 2,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 3,
                            LessonId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 4,
                            LessonId = 4,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 5,
                            LessonId = 5,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 6,
                            LessonId = 6,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 7,
                            LessonId = 7,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 8,
                            LessonId = 7,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 9,
                            LessonId = 8,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 10,
                            LessonId = 8,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TimeSchedule", b =>
                {
                    b.Property<int>("TimeScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TimeInterval")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TimeScheduleId");

                    b.HasAlternateKey("TimeInterval");

                    b.ToTable("TimeSchedules");

                    b.HasData(
                        new
                        {
                            TimeScheduleId = 1,
                            TimeInterval = "09:00 – 10:30"
                        },
                        new
                        {
                            TimeScheduleId = 2,
                            TimeInterval = "10:45 – 12:15"
                        },
                        new
                        {
                            TimeScheduleId = 3,
                            TimeInterval = "13:00 – 14:30"
                        },
                        new
                        {
                            TimeScheduleId = 4,
                            TimeInterval = "14:45 – 16:15"
                        },
                        new
                        {
                            TimeScheduleId = 5,
                            TimeInterval = "16:30 – 18:00"
                        },
                        new
                        {
                            TimeScheduleId = 6,
                            TimeInterval = "18:15 – 19:45"
                        },
                        new
                        {
                            TimeScheduleId = 7,
                            TimeInterval = "20:00 – 21:30"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("UserId");

                    b.HasAlternateKey("Login");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessLevelId = 1,
                            Email = "student@mail.ru",
                            FirstName = "Student",
                            LastName = "Studentovich",
                            Login = "Student_1",
                            PasswordHash = "976BCA75A7B6265880DBEBCAB262F009ADFCF25FEAE7050E347A6449F7E23FAC61DC6DBA2F753FE9CE31817D4C67FD3BFFD27BCA9E61FDD47954036741F3B608",
                            PasswordSalt = "lqU9irXr/QP2GweWaDuStsiYn9i5oYWCdFWizD+qReoJsgoyvPU4jQjBWfIgS6eJM+kLewksNB72eTeWMfxMMw==",
                            Phone = "11111111111"
                        },
                        new
                        {
                            UserId = 2,
                            AccessLevelId = 2,
                            Email = "starosta@mail.ru",
                            FirstName = "Starosta",
                            LastName = "Starostovich",
                            Login = "Starosta_1",
                            PasswordHash = "712D7F5B86765C784F3A4626087F160EA2C08B0A4FCEE6ECCD84075D03F64BCFDB5EC680A3303BC84A4C13DE59C460E5CCB4FB08D0567DF5FE2B81C64479E631",
                            PasswordSalt = "gy55/06Y6SwXaRWZe26xCEcIXYvV9Zc9jeqiSU35zDhHB+Iqwe0W6Zpyj2B+amZl6QN6UZll6M3Y1erBSk7yqw==",
                            Phone = "22222222222"
                        },
                        new
                        {
                            UserId = 3,
                            AccessLevelId = 3,
                            Email = "prepod@mail.ru",
                            FirstName = "Prepod",
                            LastName = "Prepodovich",
                            Login = "Prepod_1",
                            PasswordHash = "9E20B43B77E003FC8A38CF0FFAF208E67B6F366519F4925EE75346AC0DACB92CA1BAF8538709A9E619F0A25ED29F1DEFB7952B6B7ECD552A7CBF37CD610F078E",
                            PasswordSalt = "3h6Am61Cla2IYlCA5SgtSrbdSM8QpjxVrf80PacXl1mekurBuq6x1bzo6Zh+eIP+//RC7pKfNILccEKvUIGM1A==",
                            Phone = "33333333333"
                        },
                        new
                        {
                            UserId = 4,
                            AccessLevelId = 4,
                            Email = "dekanat@mail.ru",
                            FirstName = "Dekanat",
                            LastName = "Dekanat",
                            Login = "Dekanat_1",
                            PasswordHash = "0BA7212AF571F1FEA6180842357AA7676BAAF3E0294F41CF9ABDC9B03C679AED9BAF79FAE7EFA7EEB39A73236286F10480B7CB4039A132C807F5B8CAD19D03A8",
                            PasswordSalt = "DFS/pRGdT0pRwuk4iUr9GzMRgmxln79Twzr/3gL8a90SCM7wjTVlV7y9TCwioparc75kS72Hivs5dIcJ22jBuA==",
                            Phone = "44444444444"
                        },
                        new
                        {
                            UserId = 5,
                            AccessLevelId = 5,
                            Email = "admin@mail.ru",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Login = "Admin_1",
                            PasswordHash = "B93B4D70B06BA07CD6C3AD2EAF988BE0CA2CB5A7D637549AA8CB84666C2275259C0D56788C2E58FDE69BCD153662716E24A749857D93CADF82199EBF6100A767",
                            PasswordSalt = "1kghpqv1BrSqELoluHJqUcLQJvhQVlku8B2yvyIL/bTwBV9NdjlfndZH8xF0115l840b+pg5aR6yZXStdOIB5A==",
                            Phone = "55555555555"
                        },
                        new
                        {
                            UserId = 6,
                            AccessLevelId = 1,
                            FirstName = "Михаил",
                            LastName = "Аншуков",
                            Login = "Anshukov_Mikhail",
                            PasswordHash = "0AFD708E3B706C6B174CA488CB052C31A196C2D6137361C5F4A1ECC54E7C90ADAA8CFC85776A9360B7F80D6CE6C72B3164975319AB2654EAF3158E707B690D7A",
                            PasswordSalt = "ClN090LUmSShW72v2iMse+lxFe/j+/kE59vBIPQn3ajBZgeUq8GLcqXDbaby9afX033T93ZN8LJvZE+hcALP7Q=="
                        },
                        new
                        {
                            UserId = 7,
                            AccessLevelId = 1,
                            FirstName = "Артем",
                            LastName = "Корнилов",
                            Login = "Kornilov_Artem",
                            PasswordHash = "9D464916569CE287DBC292129946EF986207FBB052802C1AC802965F51A30658D5676607EC4C9B01FE0348A6DC40637EDE6E0EF64D85AEB820D0491643E64EEF",
                            PasswordSalt = "you2hVgiLF+WozjeAdax2Hl4BObiS4Ji3VAhRskqf1MUHdywB6KV4QtqanbBnyHAM3oI4qPybJuMKfqNlZMFlQ=="
                        },
                        new
                        {
                            UserId = 8,
                            AccessLevelId = 2,
                            FirstName = "Александр",
                            LastName = "Милаков",
                            Login = "Milakov_Alex",
                            MiddleName = "Владимирович",
                            PasswordHash = "8254F989405AB0E598919689DE6D279238FFED37339F3BD7D2FA1445330840DFCAD19D6B77F4BBAB97250271410B8A8E9C7566720139B8379DCFB905CF082E16",
                            PasswordSalt = "VrEXIDWXpFtAch+T7s1pCIp0hJBd0hnRzogFUmWoxRcwrO8/lKgL41BwzzHLFsZHVdJXDRwsJwl0OqD9n9mQlw=="
                        },
                        new
                        {
                            UserId = 9,
                            AccessLevelId = 3,
                            FirstName = "Кирилл",
                            LastName = "Коновалов",
                            Login = "Konovalov_K_A",
                            MiddleName = "Андреевич",
                            PasswordHash = "E9B2E6D6CDC890F721B353975AB5E49AAE1FBC95A37CC05C92E7FC8E7923A039590401EB44929663EA520558F8D68124A20BE37FE9D13634571A8DEB3B98730C",
                            PasswordSalt = "BdAEwcbu7N6CUotVR4GHTrjOibo6DUU7g8ZbJpQlTnoa7i4qpn2C7uP9erWYnE6AfgA0paV/CN6Ld29DVXUMVQ=="
                        },
                        new
                        {
                            UserId = 10,
                            AccessLevelId = 3,
                            FirstName = "Николай",
                            LastName = "Балакирев",
                            Login = "Balakirev_N_E",
                            MiddleName = "Евгеньевич",
                            PasswordHash = "812EDCC1525AF0EA2BA0FF686B468A87FF855951236E05778C90363919DA2F29D3915A353FB89AF29356481AB0B581606DC5E7F5DEF5E600D41CB04A2ACBD6EA",
                            PasswordSalt = "ST33Zxq5yhpFLQw8nToe8FqHgTLPKMKF8G1QtSqPMOX+gKORkOciC4X2MZlLpTcHKPVIjPejciJC7tcn1ooOKQ=="
                        },
                        new
                        {
                            UserId = 11,
                            AccessLevelId = 4,
                            FirstName = "Декана",
                            LastName = "Заместитель",
                            Login = "Zam_Dekan",
                            PasswordHash = "6EF6C951CF6C3D91D07A68B350E1264B5C19C10D0F72F697C963635FE751E4609B7E2C08870118F4AD5904924A84DE10887A69BCD8B088DF10A850F58DD50A93",
                            PasswordSalt = "z+lmgdF8FacOTgZgRIHT2QUiT7oBrMErRwmGk+KRFxL14oa4oICZkBQbTxaHapEiuKAk9qi5D+BfCHe7zQsu/A=="
                        },
                        new
                        {
                            UserId = 12,
                            AccessLevelId = 5,
                            FirstName = "Alexander",
                            LastName = "Milakov",
                            Login = "Meeluck",
                            PasswordHash = "58797ABB37CCC2178C927A95325E2F8C1D747AECBC69B4D1099350B9B97113864E5659C8B3E0411B780E927D07216CF7145F7847E5FD6985DD25A5B6E1E2408C",
                            PasswordSalt = "xz0Ktrg98tmHqGumGEBHeoLuGUq2UCKY6iGPBh5jnG0+lVBJoqZLCdU69WBokvmTMFs89N1LDIbsTr9IRiURgg=="
                        },
                        new
                        {
                            UserId = 13,
                            AccessLevelId = 2,
                            FirstName = "Никита",
                            LastName = "Майер",
                            Login = "Mayer",
                            PasswordHash = "EA24316D2E5830EC9C560E8EF8ABA67D3677E7A5B67A93B1B390ED6E66599A791FD9178F3A52712302E86E3D051D24ECF7676FA9AC331D1B188B8127ED48883B",
                            PasswordSalt = "/b9gBtldMPEEsl+3Xl3jiPZgEBFOq+dnHuH4Co3sGkkveWCQAMdCvzapQJ6QAjzwxoXN2rCV1I7577uPyymirA=="
                        },
                        new
                        {
                            UserId = 14,
                            AccessLevelId = 1,
                            FirstName = "Иван",
                            LastName = "Волков",
                            Login = "Volkov",
                            PasswordHash = "114D812E6829E72248F600F2D1DFDE25D073D8457D8D28C2CFD503DDF1C59E6966D2197BF445A83585A366B72468F5AE97036F7F56C63734A0E3E6F0F9C91378",
                            PasswordSalt = "UhNPhd77UwYiQbWz8toeuF99A1xJQC9SAs4AC57JeyYPjDVx6H/09aEVvtK4djDTqqtetjRwTdsFtAaK3Abrsw=="
                        },
                        new
                        {
                            UserId = 15,
                            AccessLevelId = 3,
                            FirstName = "Григорий",
                            LastName = "Семёнов",
                            Login = "Semenov_Grigory",
                            MiddleName = "Евгеньевич",
                            PasswordHash = "16171BB58ABC014271058C4919C8827B2CA9879BCC1D65B1C20021630D4071CC0189CDFC17A5D55FE33503353A8A32B215918EEDB6F6AECD02DF1CA860C8F45D",
                            PasswordSalt = "BKQXsnXCFkIEmb8nKtO0kxEZcYjwjLV1BKliBpSzFE1wSYl7fpPfNiUpYrRNup/V3UzkmVXE6yQzQ+bg390EXQ=="
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AcademicPerformance", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("AcademicPerformances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithMany("AcademicPerformances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Classroom", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Building", "Building")
                        .WithMany("Classrooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Group", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.GroupLesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Group", "Group")
                        .WithMany("GroupLessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("GroupLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Lesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Classroom", "Classroom")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.TimeSchedule", "TimeSchedule")
                        .WithMany("Lessons")
                        .HasForeignKey("TimeScheduleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.StudentGroup", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithOne("StudentGroup")
                        .HasForeignKey("ElectronicJournal_DataBase.Model.StudentGroup", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Teacher", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Position", "Position")
                        .WithMany("Teachers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("ElectronicJournal_DataBase.Model.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TeacherLesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.Teacher", "Teacher")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.User", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.AccessLevel", "AccessLevel")
                        .WithMany("Users")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
