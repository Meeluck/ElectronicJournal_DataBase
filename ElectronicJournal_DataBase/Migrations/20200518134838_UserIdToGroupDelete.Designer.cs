// <auto-generated />
using System;
using ElectronicJournal_DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicJournal_DataBase.Migrations
{
    [DbContext(typeof(ElectronicJournalContext))]
    [Migration("20200518134838_UserIdToGroupDelete")]
    partial class UserIdToGroupDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AcademicPerformance", b =>
                {
                    b.Property<int>("AcademicPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AcademicPerformanceId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicPerformances");
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessLevelId");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            AccessLevelId = 1,
                            AccessLevelName = "Студент"
                        },
                        new
                        {
                            AccessLevelId = 2,
                            AccessLevelName = "Староста"
                        },
                        new
                        {
                            AccessLevelId = 3,
                            AccessLevelName = "Преподаватель"
                        },
                        new
                        {
                            AccessLevelId = 4,
                            AccessLevelName = "Деканат"
                        },
                        new
                        {
                            AccessLevelId = 5,
                            AccessLevelName = "Админ"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BuildingId");

                    b.HasAlternateKey("BuildingName");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1,
                            BuildingName = "Оршанская"
                        },
                        new
                        {
                            BuildingId = 2,
                            BuildingName = "ИНЖЭКИН"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ClassroomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassroomId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            BuildingId = 1,
                            ClassroomName = "403B"
                        },
                        new
                        {
                            ClassroomId = 2,
                            BuildingId = 1,
                            ClassroomName = "404B"
                        },
                        new
                        {
                            ClassroomId = 3,
                            BuildingId = 1,
                            ClassroomName = "423B"
                        },
                        new
                        {
                            ClassroomId = 4,
                            BuildingId = 1,
                            ClassroomName = "608Б"
                        },
                        new
                        {
                            ClassroomId = 5,
                            BuildingId = 1,
                            ClassroomName = "606Б"
                        },
                        new
                        {
                            ClassroomId = 6,
                            BuildingId = 1,
                            ClassroomName = "722Б"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("YearFormationGroup")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId");

                    b.HasAlternateKey("GroupName");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            GroupName = "М3О-335Б-17",
                            YearFormationGroup = new DateTime(2017, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GroupId = 2,
                            GroupName = "М3О-333Б-17",
                            YearFormationGroup = new DateTime(2017, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.GroupLesson", b =>
                {
                    b.Property<int>("GroupLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("GroupLessonId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");

                    b.HasData(
                        new
                        {
                            GroupLessonId = 1,
                            GroupId = 1,
                            LessonId = 1
                        },
                        new
                        {
                            GroupLessonId = 2,
                            GroupId = 2,
                            LessonId = 1
                        },
                        new
                        {
                            GroupLessonId = 3,
                            GroupId = 1,
                            LessonId = 2
                        },
                        new
                        {
                            GroupLessonId = 4,
                            GroupId = 2,
                            LessonId = 2
                        },
                        new
                        {
                            GroupLessonId = 5,
                            GroupId = 1,
                            LessonId = 3
                        },
                        new
                        {
                            GroupLessonId = 6,
                            GroupId = 1,
                            LessonId = 4
                        },
                        new
                        {
                            GroupLessonId = 7,
                            GroupId = 1,
                            LessonId = 5
                        },
                        new
                        {
                            GroupLessonId = 8,
                            GroupId = 1,
                            LessonId = 6
                        },
                        new
                        {
                            GroupLessonId = 9,
                            GroupId = 1,
                            LessonId = 7
                        },
                        new
                        {
                            GroupLessonId = 10,
                            GroupId = 1,
                            LessonId = 8
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeScheduleId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeScheduleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            Date = new DateTime(2020, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 4,
                            TimeScheduleId = 1
                        },
                        new
                        {
                            LessonId = 2,
                            Date = new DateTime(2020, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 4,
                            TimeScheduleId = 2
                        },
                        new
                        {
                            LessonId = 3,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 1,
                            TimeScheduleId = 3
                        },
                        new
                        {
                            LessonId = 4,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 3,
                            SubjectId = 1,
                            TimeScheduleId = 4
                        },
                        new
                        {
                            LessonId = 5,
                            Date = new DateTime(2020, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 3,
                            SubjectId = 1,
                            TimeScheduleId = 5
                        },
                        new
                        {
                            LessonId = 6,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 1,
                            SubjectId = 2,
                            TimeScheduleId = 2
                        },
                        new
                        {
                            LessonId = 7,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 2,
                            SubjectId = 2,
                            TimeScheduleId = 3
                        },
                        new
                        {
                            LessonId = 8,
                            Date = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonTypeId = 2,
                            SubjectId = 2,
                            TimeScheduleId = 4
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LessonTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LessonTypeId");

                    b.HasAlternateKey("LessonTypeName");

                    b.ToTable("LessonTypes");

                    b.HasData(
                        new
                        {
                            LessonTypeId = 1,
                            LessonTypeName = "Лекция"
                        },
                        new
                        {
                            LessonTypeId = 2,
                            LessonTypeName = "Практическое занятие"
                        },
                        new
                        {
                            LessonTypeId = 3,
                            LessonTypeName = "Лабораторная работа"
                        },
                        new
                        {
                            LessonTypeId = 4,
                            LessonTypeName = "Экзамен"
                        },
                        new
                        {
                            LessonTypeId = 5,
                            LessonTypeName = "Зачет"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PositionId");

                    b.HasAlternateKey("PositionName");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "Лаборант"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "Преподаватель"
                        },
                        new
                        {
                            PositionId = 3,
                            PositionName = "Старший преподаватель"
                        },
                        new
                        {
                            PositionId = 4,
                            PositionName = "Доцент"
                        },
                        new
                        {
                            PositionId = 5,
                            PositionName = "Профессор"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.StudentGroup", b =>
                {
                    b.Property<int>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentGroupId");

                    b.HasAlternateKey("UserId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            StudentGroupId = 1,
                            GroupId = 1,
                            UserId = 6
                        },
                        new
                        {
                            StudentGroupId = 2,
                            GroupId = 1,
                            UserId = 7
                        },
                        new
                        {
                            StudentGroupId = 3,
                            GroupId = 1,
                            UserId = 8
                        },
                        new
                        {
                            StudentGroupId = 4,
                            GroupId = 2,
                            UserId = 13
                        },
                        new
                        {
                            StudentGroupId = 5,
                            GroupId = 2,
                            UserId = 14
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubjectId");

                    b.HasAlternateKey("SubjectName");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            SubjectName = "Web-программирование"
                        },
                        new
                        {
                            SubjectId = 2,
                            SubjectName = "Программирование в информационных системах"
                        },
                        new
                        {
                            SubjectId = 3,
                            SubjectName = "Машинно-ориентированное программирование"
                        },
                        new
                        {
                            SubjectId = 4,
                            SubjectName = "Операционные системы"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasAlternateKey("UserId");

                    b.HasIndex("PositionId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            PositionId = 3,
                            UserId = 9
                        },
                        new
                        {
                            TeacherId = 2,
                            PositionId = 4,
                            UserId = 10
                        },
                        new
                        {
                            TeacherId = 3,
                            PositionId = 4,
                            UserId = 15
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TeacherLesson", b =>
                {
                    b.Property<int>("TeacherLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("TeacherLessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLessons");

                    b.HasData(
                        new
                        {
                            TeacherLessonId = 1,
                            LessonId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 2,
                            LessonId = 2,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 3,
                            LessonId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 4,
                            LessonId = 4,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 5,
                            LessonId = 5,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 6,
                            LessonId = 6,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 7,
                            LessonId = 7,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 8,
                            LessonId = 7,
                            TeacherId = 3
                        },
                        new
                        {
                            TeacherLessonId = 9,
                            LessonId = 8,
                            TeacherId = 1
                        },
                        new
                        {
                            TeacherLessonId = 10,
                            LessonId = 8,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TimeSchedule", b =>
                {
                    b.Property<int>("TimeScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TimeInterval")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TimeScheduleId");

                    b.HasAlternateKey("TimeInterval");

                    b.ToTable("TimeSchedules");

                    b.HasData(
                        new
                        {
                            TimeScheduleId = 1,
                            TimeInterval = "09:00 – 10:30"
                        },
                        new
                        {
                            TimeScheduleId = 2,
                            TimeInterval = "10:45 – 12:15"
                        },
                        new
                        {
                            TimeScheduleId = 3,
                            TimeInterval = "13:00 – 14:30"
                        },
                        new
                        {
                            TimeScheduleId = 4,
                            TimeInterval = "14:45 – 16:15"
                        },
                        new
                        {
                            TimeScheduleId = 5,
                            TimeInterval = "16:30 – 18:00"
                        },
                        new
                        {
                            TimeScheduleId = 6,
                            TimeInterval = "18:15 – 19:45"
                        },
                        new
                        {
                            TimeScheduleId = 7,
                            TimeInterval = "20:00 – 21:30"
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("UserId");

                    b.HasAlternateKey("Login");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessLevelId = 1,
                            Email = "student@mail.ru",
                            FirstName = "Student",
                            LastName = "Studentovich",
                            Login = "Student_1",
                            PasswordHash = "FCCEC4D0214AAFA6C8E844F1EE694759A6EAB8B0BE6770486DFCAEC00757B8CFD51C8ECB353DD62F47B8315E7D64901FD2FD5F9A19648777AC2F4FFCF7295A60",
                            PasswordSalt = "K0DgnqT1jFrVAVytmJqu/g7KDepxoBOMk+DgvgAl0JqIsej5C7WW4Q4UTBqpJIDrBL5eUYeHCRVOPSrwy94Ajw==",
                            Phone = "11111111111"
                        },
                        new
                        {
                            UserId = 2,
                            AccessLevelId = 2,
                            Email = "starosta@mail.ru",
                            FirstName = "Starosta",
                            LastName = "Starostovich",
                            Login = "Starosta_1",
                            PasswordHash = "559452CFD25EB577FCD09F67F72F065030B9E9BD659CD1F3D0628AA47E4EEC636589A3ABD55498EE010F61728FA722947AE659F0E2CD96934EC4F356F504A878",
                            PasswordSalt = "Zpw1hI6F8oq1o02LHH9hTTPSRrZlppp2m8Sx8tO4M59fLDqkth1kY0oGuLkVNa4LJG6lewTg5eQJaJ/5+9afiA==",
                            Phone = "22222222222"
                        },
                        new
                        {
                            UserId = 3,
                            AccessLevelId = 3,
                            Email = "prepod@mail.ru",
                            FirstName = "Prepod",
                            LastName = "Prepodovich",
                            Login = "Prepod_1",
                            PasswordHash = "C1E2C71C72ABCE7D232737AEBDE213E3643676ECFB098D286862B96136E2D1FCC474E36B6EB4753FB8FBD13228F7BD37B6A55853F32F51CD69FD9F233FFD2166",
                            PasswordSalt = "17LmkYS53TWcYStihET9nEKkh9EdkIXyfWLMJKPfsmR8iSJzW7ncxtjhzU/AmAcKyNpLjmfRn4pVteNxV/soZw==",
                            Phone = "33333333333"
                        },
                        new
                        {
                            UserId = 4,
                            AccessLevelId = 4,
                            Email = "dekanat@mail.ru",
                            FirstName = "Dekanat",
                            LastName = "Dekanat",
                            Login = "Dekanat_1",
                            PasswordHash = "B84DF1455A1B98A2F3B6A88D88FA616BF5954001D3860420C8ADC32CCCB0F9BA6CF8B5730AF6A43F591332C34B8D935576C6A0C0ADA5ADDDCF819016433BDDCF",
                            PasswordSalt = "D0KSSfgo1Chqx6SDdgV2uCd9LE0Wdcsp2byp8/V2NzdcMD7mv4pedGVPuLXNjA8mp+sJgePjtBdUBVaPvf+bAA==",
                            Phone = "44444444444"
                        },
                        new
                        {
                            UserId = 5,
                            AccessLevelId = 5,
                            Email = "admin@mail.ru",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Login = "Admin_1",
                            PasswordHash = "5D0FEA283ADD1D60C309ADFA3D15C99D528E28D74A4D9B717C6DB4DAA2BFDD442A330F56CBF9F86EAEB7EA05F466DCCEC8D28D8DFFCA4D4FBCF840D0E5BE95D2",
                            PasswordSalt = "OCsc2X4vh1zcb5URmC7EvxfnWfLd0Jmtuqryr3+9MOM8+OVvRHeJc/KL5waW/9Qt3DbT+pUlhq3unVimpK6mrA==",
                            Phone = "55555555555"
                        },
                        new
                        {
                            UserId = 6,
                            AccessLevelId = 1,
                            FirstName = "Михаил",
                            LastName = "Аншуков",
                            Login = "Anshukov_Mikhail",
                            PasswordHash = "F9034FA4374424D84691F4EE18EA93E2682D50FA1F7655416F2317DA096EC817932C7C8C54F0E280E77662269EFD4A6EE57060721D0D0ADD8845DA99F3915FE0",
                            PasswordSalt = "qAP6AlMhiXedNaVHlBlEkWw5+jAHzPo8e0oglUcAj53ZCXOHmu2rTgA4hrvDy1bziMQTJekr6NUQmdiWSatpbA=="
                        },
                        new
                        {
                            UserId = 7,
                            AccessLevelId = 1,
                            FirstName = "Артем",
                            LastName = "Корнилов",
                            Login = "Kornilov_Artem",
                            PasswordHash = "E63A42AFA26922D71EF0FCC8BED916D1CDFA02D7F2023C314C80BDCB3CB7F9DEFE09DD7DB31AA712A1A7F62DA0EAD79B0EF8F6469E58AE17C12B14AC66761462",
                            PasswordSalt = "YyDria0WR5DktUmXzigBi26ExD+5dPhD4vFtR1HIo191hmZLNCJIRY6h0+LKyQxlR2wvRcsgjBMLqkDnwoJxyQ=="
                        },
                        new
                        {
                            UserId = 8,
                            AccessLevelId = 2,
                            FirstName = "Александр",
                            LastName = "Милаков",
                            Login = "Milakov_Alex",
                            MiddleName = "Владимирович",
                            PasswordHash = "E3906A1301DC0EB0EE68F42A03AB16F931917CD862235142E295A12B88A37FBCF6B20BCCE4090481150C9D8FF3E49BE667E1741477AB5090F8488C8A8597087C",
                            PasswordSalt = "UzjuiZmg0A+fGV7wQ/lK1MTJS+1HZIbWjrd+xgiVKZtzyKvIoyLpmbSFyV+mjY2kdtnMTr1NkGVgF5LgZY23RQ=="
                        },
                        new
                        {
                            UserId = 9,
                            AccessLevelId = 3,
                            FirstName = "Кирилл",
                            LastName = "Коновалов",
                            Login = "Konovalov_K_A",
                            MiddleName = "Андреевич",
                            PasswordHash = "64EB7E2B0EE25BC1D20D6646A022AEE858FAC6E30336BF94FF39C054D1D6AAFDC126A79C6B8FEEF58C6EADDB59C92984911D32DAE336517EF3738CE742786C30",
                            PasswordSalt = "9EqlephOdyHgmCCkxtFIrQ0TayXlni/x/a1k0cEKymg7cbX/t46cekVxuwqjD7cvTDJWwyi1BW2AGV4MX0I8JQ=="
                        },
                        new
                        {
                            UserId = 10,
                            AccessLevelId = 3,
                            FirstName = "Николай",
                            LastName = "Балакирев",
                            Login = "Balakirev_N_E",
                            MiddleName = "Евгеньевич",
                            PasswordHash = "93F5CADB9EE248F24F7F3E3F0636CC27DC729CB75C204876CDBA500A4DF27D681F20713FA8916076AD06F309FC1717E1B4F506D11BB404D392E1BB245DBE0E3B",
                            PasswordSalt = "1b2mPo3jwntzd89bBCV+EcWOZOncUm5jv2yKaXIW7kSWhDlqC7ONtEc9hbeFODrlaKvAwggOaNwRFdT3DaBzuQ=="
                        },
                        new
                        {
                            UserId = 11,
                            AccessLevelId = 4,
                            FirstName = "Декана",
                            LastName = "Заместитель",
                            Login = "Zam_Dekan",
                            PasswordHash = "DF784E710D0DFC14890A26EC0091E3D7CCB0E0D843C6CE239E47D0B1904F6A62845D3E8E8BDCD3307BD622E24E44FA1BBF489ACC34EE04C6D51FEDA6896E2D5C",
                            PasswordSalt = "IE52HJybs3QPuAEeI69LRHEtDjQ5HuhyDqjrmYbnGh1UdziTdgiqYqYvzlu3t8LxLNm0T8lS2ODy9ALkV28cZA=="
                        },
                        new
                        {
                            UserId = 12,
                            AccessLevelId = 5,
                            FirstName = "Alexander",
                            LastName = "Milakov",
                            Login = "Meeluck",
                            PasswordHash = "EE3A908A7066BCAF6206761D4635972B97BB375B6F0E831AC2C69DB88650764C2E8370694E8D1F3266C7FB241CA48A419FF1DC528C28448C125F647A1EEC0155",
                            PasswordSalt = "CMs6WRpBUAZ9Q6cSmH+r4+2u6wdS9ZlGlX8aesyPXnSWdEBYFq41N5ZUCgQ5M+bqP+jRx1D0l20T4Bm8NdlYaA=="
                        },
                        new
                        {
                            UserId = 13,
                            AccessLevelId = 2,
                            FirstName = "Никита",
                            LastName = "Майер",
                            Login = "Mayer",
                            PasswordHash = "DEB9796E0DC0FB8A7004343238C720C2DD21534B871A5587E6BD5A9319E87387F483F60529938466E8C957B737EBFAC7C508B9B4976F1DD58D1687196A18081A",
                            PasswordSalt = "kI8RCGuS0i6FXLK4tB/UnKgUwd2UAgUx/XZW2w0kuBDZc02TWIAtGLkaBDWYpVGj4rQHzHLO3LHvwwu8bZTCFg=="
                        },
                        new
                        {
                            UserId = 14,
                            AccessLevelId = 1,
                            FirstName = "Иван",
                            LastName = "Волков",
                            Login = "Volkov",
                            PasswordHash = "CC49E8C1C6899126F9D53A1B9B25D15F62993D38C658319417F90CC58C0E0A8C20E5F7B9A0253818BE55811229823729E5E7ACF59874E12C43A07AB43A32A089",
                            PasswordSalt = "lmoN7G2yUudTjYLgqJTl5Ux5F6a6iVAIl8Kbx4P1890B6Adx3s3OwUJ30sPjcCtcUUUkrTw2IT6qYO5LM/HvjA=="
                        },
                        new
                        {
                            UserId = 15,
                            AccessLevelId = 3,
                            FirstName = "Григорий",
                            LastName = "Семёнов",
                            Login = "Semenov_Grigory",
                            MiddleName = "Евгеньевич",
                            PasswordHash = "02229062BD80BF7F0077858ADE959ABDFDC90DE9C632B47289271B64998D51A19462597CCFD56E1644C3D38380BFC9D6C6C6DABB8F1BED3706588F674E51E3C5",
                            PasswordSalt = "Epi5c3TmNqxXTxABES0U4FBSKVwuvXWCROMJNqjENuJ48HfI2ZtcLPknnk48wdyMLdOLzMVF6WpZ5gkI4ZSyaQ=="
                        });
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.AcademicPerformance", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("AcademicPerformances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithMany("AcademicPerformances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Classroom", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Building", "Building")
                        .WithMany("Classrooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.GroupLesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Group", "Group")
                        .WithMany("GroupLessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("GroupLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Lesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Classroom", "Classroom")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.TimeSchedule", "TimeSchedule")
                        .WithMany("Lessons")
                        .HasForeignKey("TimeScheduleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.StudentGroup", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithOne("StudentGroup")
                        .HasForeignKey("ElectronicJournal_DataBase.Model.StudentGroup", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.Teacher", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Position", "Position")
                        .WithMany("Teachers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ElectronicJournal_DataBase.Model.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("ElectronicJournal_DataBase.Model.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.TeacherLesson", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.Lesson", "Lesson")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicJournal_DataBase.Model.Teacher", "Teacher")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicJournal_DataBase.Model.User", b =>
                {
                    b.HasOne("ElectronicJournal_DataBase.Model.AccessLevel", "AccessLevel")
                        .WithMany("Users")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
